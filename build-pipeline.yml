trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  artifactName: 'functionapp-build'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the Function App'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publish the Function App'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*FunctionApp2.csproj'  # adjust to your project name
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'  # ⬅️ publish directly to root
    zipAfterPublish: false  # ⬅️ disable auto-zip so we can add native libs before packaging

# ✅ Copy native .so libraries into the bin directory inside the root
- script: |
    echo "Copying native libraries to bin/..."
    mkdir -p $(Build.ArtifactStagingDirectory)/bin
    cp bin/*.so* $(Build.ArtifactStagingDirectory)/bin/
  displayName: 'Copy native libraries to bin'

# ✅ Zip only the contents of the artifact staging directory (not the folder itself)
- task: ArchiveFiles@2
  displayName: 'Create deployment zip'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'  # ✅ This is the folder containing host.json, bin/, etc.
    includeRootFolder: false  # ✅ Ensures only the contents are zipped, not the folder itself
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/functionapp.zip'
    replaceExistingArchive: true

# ✅ Publish the zip as the build artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/functionapp.zip'  # ⬅️ publish the zip file
    ArtifactName: '$(artifactName)'
    publishLocation: 'Container'
